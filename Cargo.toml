[package]
name = "owiwi-tracing-opentelemetry"
version = "0.1.1"
edition = "2024"
authors = ["Sede Soukossi"]
description = "A library to initialize tracing with opentelemetry"
license = "MIT"
categories = ["development-tools::debugging", "development-tools::profiling"]
keywords = ["opentelemetry", "tracing", "metrics"]
repository = "https://github.com/aklanti/owiwi-tracing-opentelemetry"
rust-version = "1.90.0"

[package.metadata.docs.rs]
features = ["full"]

[features]
clap = ["dep:clap", "dep:clap-verbosity-flag"]
full = ["clap", "serde", "tower"]
serde = ["dep:serde", "dep:humantime-serde"]
tower = ["dep:opentelemetry-instrumentation-tower", "opentelemetry-otlp/metrics"]
prometheus = ["dep:metrics-exporter-prometheus"]

[dependencies]
# Compile-time-checked builder generator
bon = "3.7"
# A command line argument parser
clap = { version = "4.5", optional = true, features = ["derive", "env"] }
# Easily add a `--verbose` flag to CLI
clap-verbosity-flag = { version = "3", optional = true, default-features = false, features = ["tracing"] }
# A parser and formatter for std::time::{Duration, SystemTime}
humantime = "2.3"
# Serde support for humantime
humantime-serde = { version = "1", optional = true }
# OpenTelemetry API
opentelemetry = "0.31"
# Exporter for OpenTelemetry collector
opentelemetry-otlp = { version = "0.31", default-features = false, features = ["grpc-tonic", "trace", "tls-roots", "tls"] }
# OpenTelemetry Sdout exporter
opentelemetry-stdout = "0.31"
# OpenTelemetry observability framework SDK
opentelemetry_sdk = { version = "0.31", features = ["rt-tokio"] }
# A simple secret keeping library
secrecy = { version = "0.10", features = ["serde"] }
# Serialize and deserialize data structure
serde = { version = "1", features = ["derive"], optional = true }
# Provides `derive(Error)``
thiserror = "2"
# A gRPC over HTTP/2 implementation focused on high performance, interoperability, and flexibility.
tonic = { version = "0.14", features = ["tls-aws-lc"] }
# A framework for instrumentation
tracing = "0.1"
# Utilities for enriching error handling with tracing diagnostic information.
tracing-error = "0.2"
# OpenTelemetry-compatible distributed tracing systems for processing and visualization.
tracing-opentelemetry = "0.32"
# Utilities for implementing and composing tracing subscribers
tracing-subscriber = { version = "0.3", features = ["env-filter"] }
# URL library, based on the WHATWG URL standard
url = { version = "2.5", features = ["serde"] }
# OpenTelemetry Metrics Middleware for Tower-compatible Rust HTTP servers.
opentelemetry-instrumentation-tower = { version = "0.17", optional = true }
# A metrics-compatible exporter for sending metrics to Prometheus.
metrics-exporter-prometheus = {  version = "0.17",  optional = true}

[dev-dependencies]
# A rich assertion and matcher library inspired by GoogleTest for C++
googletest = { version = "0.14", features = ["proptest"] }
# A property-based testing and shrinking library
proptest = "1.8"
# Enable fixture based testing
rstest = "0.26"

[lints.clippy]
cargo = { level = "warn", priority = -1 }
complexity = { level = "warn", priority = -1 }
correctness = { level = "warn", priority = -1 }
pedantic = { level = "warn", priority = -1 }
perf = { level = "warn", priority = -1 }
style = { level = "warn", priority = -1 }
suspicious = { level = "warn", priority = -1 }
allow_attributes_without_reason = "warn"
missing_errors_doc = "allow"
assertions_on_result_states = "warn"
deref_by_slicing = "warn"
disallowed_script_idents = "warn"
empty_drop = "warn"
empty_enum_variants_with_brackets = "warn"
empty_structs_with_brackets = "warn"
fn_to_numeric_cast_any = "warn"
if_then_some_else_none = "warn"
map_err_ignore = "warn"
multiple_crate_versions = "allow"
redundant_type_annotations = "warn"
renamed_function_params = "warn"
semicolon_outside_block = "warn"
string_to_string = "warn"
unnecessary_safety_comment = "warn"
unnecessary_safety_doc = "warn"
unneeded_field_pattern = "warn"
unused_result_ok = "warn"
unused_self = "deny"
unwrap_used = "deny"

[lints.rust]
missing_docs = "warn"
non_snake_case = "allow"
trivial_numeric_casts = "warn"
unsafe_code = "forbid"
unused-lifetimes = "warn"
unused-macro-rules = "warn"
unused_import_braces = "warn"
unused_must_use = "deny"
ambiguous_negative_literals = "warn"
missing_debug_implementations = "warn"
redundant_imports = "warn"
redundant_lifetimes = "warn"
unused_lifetimes = "warn"

[lints.rustdoc]
broken_intra_doc_links = "warn"
private_doc_tests = "warn"
unescaped_backticks = "warn"

[badges]
maintenance = { status = "actively-developed" }
